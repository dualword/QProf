CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
PROJECT(qprof)

FIND_PACKAGE(Git)
FIND_PACKAGE(Qt4 REQUIRED)

IF(DEBUG)
	SET(CMAKE_BUILD_TYPE Debug)
ELSE(DEBUG)
	SET(CMAKE_BUILD_TYPE Release)
ENDIF(DEBUG)
IF(ADVDEBUG)
	ADD_DEFINITIONS(-DADVDEBUG)
ENDIF(ADVDEBUG)

SET(CMAKE_BUILD_TYPE Debug)

EXEC_PROGRAM(cat ARGS /proc/cpuinfo | grep 'model name' | sed -e 's/.*: //' | wc -l
                OUTPUT_VARIABLE CPU_NUMBER)
SET(CPU_NUMBER "${CPU_NUMBER}")

MESSAGE("Detected CPU number =" ${CPU_NUMBER})

SET ( OBJECTS_DIR temp )
SET ( MOC_DIR temp )
SET ( UI_HEADERS_DIR temp )
SET ( UI_SOURCES_DIR temp )

## Compiler flags
if(CMAKE_COMPILER_IS_GNUCXX)
    list(APPEND FLAGS "-j${CPU_NUMBER}")
endif()

add_subdirectory(sources)
add_subdirectory(sources/resource)



include_directories( ${CMAKE_SOURCE_DIR} $(APP_SOURCES)/sources/includes )

QT4_WRAP_CPP(APP_HEADERS_MOC ${MAIN_HEADERS} )
QT4_WRAP_UI(APP_FORMS_HEADERS ${MAIN_FORMS} )
QT4_ADD_RESOURCES(APP_RESOURCES_RCC ${APP_RESOURCES})
INCLUDE_DIRECTORIES( ${CMAKE_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR})

SET(QT_USE_QTNETWORK TRUE)
SET(QT_USE_QTXML TRUE)

source_group( "Generated Files" FILES ${MOC_FILES_CPP} ${APP_FORMS_HEADERS} ${APP_RESOURCES_RCC} )

INCLUDE(${QT_USE_FILE})
ADD_DEFINITIONS(${QT_DEFINITIONS} -DQT_PROJECT)

ADD_EXECUTABLE(${CMAKE_PROJECT_NAME}
	${APP_SOURCES} 
	${MAIN_SOURCES}
	${APP_HEADERS_MOC} 
	${APP_FORMS_HEADERS} 
	${APP_RESOURCES_RCC}
)
TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME} ${QT_LIBRARIES})

ADD_CUSTOM_TARGET (tags
		COMMAND  ctags -R -f tags ${CMAKE_SOURCE_DIR}/sources 
		WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
	)

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})

# let CMake generate the version file using the version.h.in template
ADD_CUSTOM_TARGET(version
		${CMAKE_COMMAND} 
		-D GITCMD=${GIT_EXECUTABLE}
		-D PROJECT_NAME=${CMAKE_PROJECT_NAME}
		-D SRC=${CMAKE_SOURCE_DIR}/sources/version.h.in
		-D DST=${CMAKE_SOURCE_DIR}/sources/includes/version.h
		-P ${CMAKE_SOURCE_DIR}/cmake/version.cmake)

ADD_DEPENDENCIES(${CMAKE_PROJECT_NAME} version)


INSTALL(TARGETS ${CMAKE_PROJECT_NAME} RUNTIME DESTINATION bin)

# Packaging
SET(CPACK_PACKAGE_NAME ${CMAKE_PROJECT_NAME})
SET(CPACK_GENERATOR "DEB")
SET(CPACK_DEBIAN_PACKAGE_MAINTAINER "Eduard Kalinowski <eduard_kalinowski@yahoo.de>")
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "QProf GUI")
SET(CPACK_PACKAGE_DESCRIPTION "QProf GUI")
#SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_SOURCE_DIR}/README")
#SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/COPYING")
SET(CPACK_DEBIAN_PACKAGE_ARCHITECTURE "i386")

SET(CPACK_STRIP_FILES TRUE)
SET(CPACK_DEBIAN_PACKAGE_SHLIBDEPS ON)

EXECUTE_PROCESS (
  COMMAND date +"%d/%b/%Y"
  OUTPUT_VARIABLE BUILD_DATE
  OUTPUT_STRIP_TRAILING_WHITESPACE)
ADD_DEFINITIONS(-DBUILD_DATE=${BUILD_DATE})

EXECUTE_PROCESS (
	COMMAND ${GIT_EXECUTABLE} describe --tags --match "${CMAKE_PROJECT_NAME}*"
	OUTPUT_VARIABLE DESCRIBE_STRING
	OUTPUT_STRIP_TRAILING_WHITESPACE)
STRING(REGEX MATCH "([0-9]+\\.[0-9]+\\.[0-9]+).*" CPACK_DEBIAN_PACKAGE_VERSION "${DESCRIBE_STRING}")
SET(CPACK_PACKAGE_FILE_NAME ${CPACK_PACKAGE_NAME}-${CPACK_DEBIAN_PACKAGE_VERSION})
SET(CPACK_PACKAGE_FILE_NAME ${CPACK_PACKAGE_FILE_NAME}${FEATURE_STRING})
SET(CPACK_PACKAGE_FILE_NAME ${CPACK_PACKAGE_FILE_NAME}-${CPACK_DEBIAN_PACKAGE_ARCHITECTURE})

include(CPack)


